#+HTML: <h1>Typo <sub><sub><sub>TypeScript Boilerplate</sub></sub></sub></h1>
[[https://travis-ci.org/jupl/typo][file:https://img.shields.io/travis/jupl/typo/combo.svg?label=travis&style=flat-square]]
[[https://david-dm.org/jupl/typo/combo][file:https://img.shields.io/david/jupl/typo/combo.svg?style=flat-square]]
[[https://david-dm.org/jupl/typo/combo?type=dev][file:https://img.shields.io/david/dev/jupl/typo/combo.svg?style=flat-square]]

** Table of Contents
- [[#about][About]]
- [[#prerequisites][Prerequisites]]
- [[#getting-started][Getting Started]]
- [[#project-structure][Project Structure]]
- [[#tasks][Tasks]]
- [[#project-resources][Project Resources]]

** About
This is a boilerplate project for developing and packaging web server(s) using [[https://www.typescriptlang.org/][TypeScript]] , [[https://hapijs.com/][Hapi]], and [[https://webpack.js.org/][Webpack]].

^{[[#typo-typescript-boilerplate][Back to top]]}

** Prerequisites
- [[https://nodejs.org/en/][Node.js]] (8.x minimum required)
  - [[https://docs.npmjs.com/cli/npm][npm CLI]] is usually included with Node.js
- Editor with support for TypeScript, [[https://palantir.github.io/tslint/][TSLint]], and [[http://editorconfig.org/][EditorConfig]] (ex. [[https://code.visualstudio.com/][Visual Studio Code]])

^{[[#typo-typescript-boilerplate][Back to top]]}

** Getting Started
1. Clone/download this repository.
2. Install dependencies using npm:
   - =npm install=
3. Start running tasks as described below in the [[#tasks][tasks section]].

^{[[#typo-typescript-boilerplate][Back to top]]}

** Project structure
*** Overview
#+BEGIN_EXAMPLE
typo/
├─ .coverage/          # Code coverage reports
├─ dist/               # Result from build tasks
│  ├─ assets/          # Result assets
│  └─ bin/             # Result entry points
├─ jest/               # Code that runs before tests are run
├─ src/                # Source code
│  ├─ app/             # Application domain
│  │  └─ routes/       # Application routes
│  ├─ assets/          # Static files and entry points to include in builds
│  │  └─ index.ts      # An application client-side entry point (generates an HTML file too)
│  ├─ bin/             # Executable entry points
│  │  └─ app.ts        # App executable entry point
│  └─ common/          # Shared domain
│     ├─ declarations/ # TypeScript declarations
│     └─ plugin/       # Common plugins
├─ package.json        # Configuration, tasks, and dependencies
├─ package-lock.json   # Dependency pinning
├─ tsconfig.json       # TypeScript configuration
├─ tslint.json         # TypeScript linting rules
└─ webpack.config.ts   # Webpack build configuration
#+END_EXAMPLE
*** Entry Points
When TypeScript code is built, any code inside the =src/bin/= directory and any files directly inside the =assets/= directory are used to create the output files. Files in =src/bin= are built for Node, while files in =src/assets= are built for client-side. You can see what gets generated by running the =build:dev= / =build:prod= task. (see the [[#tasks][tasks section]])
*** Other Files
**** =*.test.ts=, =*.test.tsx=
Tests for components/domains/logic/etc. If code needs to be run before tests are executed see =setup-tests.ts= Some guides on tests include:
- [[https://facebook.github.io/jest/docs/api.html][Jest]]
**** =__snapshots__=
Generated files/directories when using Jest's [[https://facebook.github.io/jest/docs/tutorial-react.html#snapshot-testing][snapshot feature]]. These files should be left to Jest and not touched manually.
*** ~process.env.IS_CLIENT~
When writing code that is shared between server and client, there are times when code needs to be run in one environment but not the other. ~process.env.IS_CLIENT === "true"~ when in the client environment. For example:
#+BEGIN_SRC typescript
if(process.env.IS_CLIENT === "true") {
  // Client side only code
}

if(process.env.IS_CLIENT !== "true") {
  // Server side code which is excluded in client production builds
}
#+END_SRC

^{[[#typo-typescript-boilerplate][Back to top]]}

** Tasks
Tasks can be executed in the following manner:
#+BEGIN_EXAMPLE
npm run [command]  # npm
#+END_EXAMPLE
Examples:
#+BEGIN_EXAMPLE
npm run server
#+END_EXAMPLE
*** =package=
Package application using [[https://docs.npmjs.com/cli/pack][npm pack]] so that it can be installed and run standalone. Take advantage of [[https://github.com/motdotla/dotenv][dotenv]] and use =.env= for configuration.
**** Note
Make sure that [[https://docs.npmjs.com/misc/developers#keeping-files-out-of-your-package][.npmignore]] is up to date when using this task.
*** =server=
Alias for =server:hot=.
*** =server:dev= / =server:hot= / =server:prod=
Start server in a development or production environment. To override the port change the environment variable =PORT=.The following is also provided with =server:hot=:
- [[https://webpack.js.org/concepts/hot-module-replacement][Hot reloading]]
*** =build:dev= / =build:prod=
Build client-side code and include assets into a packaged build in the =dist/= directory. The build for =build:dev= is not minifed and includes source maps, making it ideal for development. The build for =build:prod= is minified (with dead code elimination) and does not include source maps, making it ideal for production.
*** =test= / =test:watch= / =coverage= / =coverage:watch=
Execute tests once or continuously on file changes. In addition, code coverage can be determined. For more information visit the [[https://facebook.github.io/jest/docs/configuration.html][documentation for Jest]].
*** =lint= / =lint:fix=
Check codebase against linting rules. Optionally, some errors can be fixed automatically.
*** =clean=
Cleans up JS code that was generated from building with =package=, =build:dev=, or =build:prod=.

^{[[#typo-typescript-boilerplate][Back to top]]}

** Project Resources
- Language
  - [[https://www.typescriptlang.org/][TypeScript]]
  - [[https://palantir.github.io/tslint/][TSLint]]
- Libraries
  - [[https://github.com/motdotla/dotenv][dotenv]]
  - [[https://hapijs.com/][Hapi]]
  - [[https://necolas.github.io/normalize.css/][normalize.css]]
- Testing
  - [[https://facebook.github.io/jest/][Jest]]
- Build Tools
  - [[https://webpack.js.org/][Webpack]]

^{[[#typo-typescript-boilerplate][Back to top]]}
